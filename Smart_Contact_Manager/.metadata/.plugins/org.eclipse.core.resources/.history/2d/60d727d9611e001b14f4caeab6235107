package com.smart.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;

@Configuration
public class Myconfig extends WebSecurityConfigurerAdapter {
	
	

	@Bean
	public UserDetailsService getUserDetailService()       
	{
		return new UserDetailsServiceImpl();       //get the user details
		
	}
	
	
	  @Bean
	  public BCryptPasswordEncoder getpasswordencoder() {
		  return new
	  BCryptPasswordEncoder(); }
	 
	
	
	
	  @Bean public DaoAuthenticationProvider authenticationProvider() {       //This is used to validate the username and password from database
	  DaoAuthenticationProvider daoAuthenticationProvider=new
	  DaoAuthenticationProvider();
	  daoAuthenticationProvider.setUserDetailsService(getUserDetailService());
	  daoAuthenticationProvider.setPasswordEncoder(getpasswordencoder());
	  return daoAuthenticationProvider;
	  }
	 
	 
	
	
	
	  @Override protected void configure(AuthenticationManagerBuilder auth) throws   //this method is used to tell whether this is in memory authentication(H2 Embedded) or defined database authentication(MySQL)(Authentication) 
	  Exception {
		  auth.authenticationProvider(authenticationProvider());
	  }
	 
	 

	@Override
	protected void configure(HttpSecurity http) throws Exception {                     //this method used to tell what URL are given to user and admin i,e it is (Authorisation)
		http.authorizeRequests().antMatchers("/admin/**").hasRole("ADMIN")
		.antMatchers("/user/**").hasRole("USER")
				.antMatchers("/**").permitAll().and().formLogin() .loginPage("/signin")
				.loginProcessingUrl("/do-login")
				.defaultSuccessUrl("/user/index")
				.and().csrf().disable();
	}
	
	

}
